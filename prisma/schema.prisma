generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model documents {
  id                     Int                   @id @default(autoincrement())
  user_id                Int
  content                String
  document_type          String                @db.VarChar(50)
  derived_from           Int?
  vector_db_reference_id String?               @db.VarChar(255)
  created_at             DateTime              @default(now()) @db.Timestamp(6)
  updated_at             DateTime              @default(now()) @db.Timestamp(6)
  documents              documents?            @relation("documentsTodocuments", fields: [derived_from], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_documents        documents[]           @relation("documentsTodocuments")
  users                  users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  generator_documents    generator_documents[]
}

model generator_documents {
  generator_id Int
  document_id  Int
  documents    documents  @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  generators   generators @relation(fields: [generator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([generator_id, document_id])
}

model generators {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  model_type          String                @db.VarChar(50)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  generator_documents generator_documents[]
  mascots             mascots[]
}

model mascots {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  user_id      Int
  prompt       String?
  thumbnail    String?
  generator_id Int?
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  generators   generators? @relation(fields: [generator_id], references: [id], onUpdate: NoAction)
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos       videos[]

  @@index([user_id], map: "idx_mascots_user_id")
}

model media_assets {
  id         Int      @id @default(autoincrement())
  video_id   Int
  asset_type String   @db.VarChar(50)
  url        String   @db.VarChar(255)
  prompt     String?
  thumbnail  String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  videos     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([video_id], map: "idx_media_assets_video_id")
}

model users {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  thumbnail  String?
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  documents  documents[]
  mascots    mascots[]
}

model videos {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  primary_mascot_id Int
  prompt            String?
  status            String         @db.VarChar(50)
  thumbnail         String?
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  media_assets      media_assets[]
  mascots           mascots        @relation(fields: [primary_mascot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([primary_mascot_id], map: "idx_videos_primary_mascot_id")
}
